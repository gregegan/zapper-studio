/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface RocketMerkleDistributorMainnetInterface extends utils.Interface {
  functions: {
    'claim(address,uint256[],uint256[],uint256[],bytes32[][])': FunctionFragment;
    'claimAndStake(address,uint256[],uint256[],uint256[],bytes32[][],uint256)': FunctionFragment;
    'isClaimed(uint256,address)': FunctionFragment;
    'receiveVaultWithdrawalETH()': FunctionFragment;
    'relayRewards(uint256,bytes32,uint256,uint256)': FunctionFragment;
    'version()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'claim'
      | 'claimAndStake'
      | 'isClaimed'
      | 'receiveVaultWithdrawalETH'
      | 'relayRewards'
      | 'version',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'claim',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[][],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimAndStake',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[][],
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isClaimed',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'receiveVaultWithdrawalETH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'relayRewards',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimAndStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveVaultWithdrawalETH', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayRewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'RewardsClaimed(address,uint256[],uint256[],uint256[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RewardsClaimed'): EventFragment;
}

export interface RewardsClaimedEventObject {
  claimer: string;
  rewardIndex: BigNumber[];
  amountRPL: BigNumber[];
  amountETH: BigNumber[];
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber[]],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface RocketMerkleDistributorMainnet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RocketMerkleDistributorMainnetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimAndStake(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    isClaimed(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    receiveVaultWithdrawalETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    relayRewards(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BytesLike>,
      _rewardsRPL: PromiseOrValue<BigNumberish>,
      _rewardsETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  claim(
    _nodeAddress: PromiseOrValue<string>,
    _rewardIndex: PromiseOrValue<BigNumberish>[],
    _amountRPL: PromiseOrValue<BigNumberish>[],
    _amountETH: PromiseOrValue<BigNumberish>[],
    _merkleProof: PromiseOrValue<BytesLike>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimAndStake(
    _nodeAddress: PromiseOrValue<string>,
    _rewardIndex: PromiseOrValue<BigNumberish>[],
    _amountRPL: PromiseOrValue<BigNumberish>[],
    _amountETH: PromiseOrValue<BigNumberish>[],
    _merkleProof: PromiseOrValue<BytesLike>[][],
    _stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  isClaimed(
    _rewardIndex: PromiseOrValue<BigNumberish>,
    _claimer: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  receiveVaultWithdrawalETH(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  relayRewards(
    _rewardIndex: PromiseOrValue<BigNumberish>,
    _root: PromiseOrValue<BytesLike>,
    _rewardsRPL: PromiseOrValue<BigNumberish>,
    _rewardsETH: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    claim(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      overrides?: CallOverrides,
    ): Promise<void>;

    claimAndStake(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    isClaimed(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    receiveVaultWithdrawalETH(overrides?: CallOverrides): Promise<void>;

    relayRewards(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BytesLike>,
      _rewardsRPL: PromiseOrValue<BigNumberish>,
      _rewardsETH: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'RewardsClaimed(address,uint256[],uint256[],uint256[])'(
      claimer?: PromiseOrValue<string> | null,
      rewardIndex?: null,
      amountRPL?: null,
      amountETH?: null,
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      claimer?: PromiseOrValue<string> | null,
      rewardIndex?: null,
      amountRPL?: null,
      amountETH?: null,
    ): RewardsClaimedEventFilter;
  };

  estimateGas: {
    claim(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimAndStake(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    isClaimed(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    receiveVaultWithdrawalETH(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    relayRewards(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BytesLike>,
      _rewardsRPL: PromiseOrValue<BigNumberish>,
      _rewardsETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimAndStake(
      _nodeAddress: PromiseOrValue<string>,
      _rewardIndex: PromiseOrValue<BigNumberish>[],
      _amountRPL: PromiseOrValue<BigNumberish>[],
      _amountETH: PromiseOrValue<BigNumberish>[],
      _merkleProof: PromiseOrValue<BytesLike>[][],
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    isClaimed(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _claimer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    receiveVaultWithdrawalETH(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    relayRewards(
      _rewardIndex: PromiseOrValue<BigNumberish>,
      _root: PromiseOrValue<BytesLike>,
      _rewardsRPL: PromiseOrValue<BigNumberish>,
      _rewardsETH: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
