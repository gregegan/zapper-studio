/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export interface RocketNodeDistributorFactoryInterface extends utils.Interface {
  functions: {
    'createProxy(address)': FunctionFragment;
    'getProxyAddress(address)': FunctionFragment;
    'getProxyBytecode()': FunctionFragment;
    'version()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'createProxy' | 'getProxyAddress' | 'getProxyBytecode' | 'version',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'createProxy', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getProxyAddress', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getProxyBytecode', values?: undefined): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'createProxy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProxyAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getProxyBytecode', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'ProxyCreated(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ProxyCreated'): EventFragment;
}

export interface ProxyCreatedEventObject {
  _address: string;
}
export type ProxyCreatedEvent = TypedEvent<[string], ProxyCreatedEventObject>;

export type ProxyCreatedEventFilter = TypedEventFilter<ProxyCreatedEvent>;

export interface RocketNodeDistributorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RocketNodeDistributorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProxy(
      _nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getProxyAddress(_nodeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

    getProxyBytecode(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  createProxy(
    _nodeAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getProxyAddress(_nodeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  getProxyBytecode(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    createProxy(_nodeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    getProxyAddress(_nodeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    getProxyBytecode(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'ProxyCreated(address)'(_address?: null): ProxyCreatedEventFilter;
    ProxyCreated(_address?: null): ProxyCreatedEventFilter;
  };

  estimateGas: {
    createProxy(
      _nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getProxyAddress(_nodeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getProxyBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createProxy(
      _nodeAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getProxyAddress(_nodeAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyBytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
